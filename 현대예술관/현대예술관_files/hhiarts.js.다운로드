/**
 * 현대예술관 공통 스크립트
 */
   "use strict";

   //전역 설정
   var __login_page = "/member.do?SVC_ID=goLogin";
   var __ssl_port   = "";
   var __ControlPage = "";
   var __returnurlParamName="rurl";



    /**
    * replaceAll
    */
    String.prototype.replaceAll = function (findValue, replaceValue){
    return this.split(findValue).join(replaceValue);
    }

    /**
    * trim
    */
    String.prototype.trim = function () {
    return this.replace(/^\s*|\s*$/g,"");
    }



    var _c = (function(){
        "use strict";



        function _gf_makeTopMenu(){
          var _MainMenu = [];
          var nDepth0    = -1;
          var nDepth1    = -1;
          var nDepth2    = -1;
          for(nDepth0 = 0 ; nDepth0 < _Menu.length ; nDepth0 ++) {
            _MainMenu.push('<li class="depth-1">');
            _MainMenu.push('<a href="javascript:_goMenu(\''+_Menu[nDepth0].mid+'\')" >'+_Menu[nDepth0].title+'</a>'  );
            if(_Menu[nDepth0].submenu.length > 0) {
                _MainMenu.push('\n<ul>');
                for( nDepth1 = 0 ; nDepth1 < _Menu[nDepth0].submenu.length; nDepth1 ++) {
                    if (_Menu[nDepth0].submenu[nDepth1].submenu.length > 0) {
                        _MainMenu.push('\n<li class="depth-2"><a href="javascript:_goMenu(\''+_Menu[nDepth0].submenu[nDepth1].mid+'\')" class="be">'+_Menu[nDepth0].submenu[nDepth1].title+'</a> \n<ul class="depth3">'  );
                        for(nDepth2 = 0 ; nDepth2 < _Menu[nDepth0].submenu[nDepth1].submenu.length ; nDepth2 ++){
                            _MainMenu.push('\n<li class="depth-3"><a href="javascript:_goMenu(\''+_Menu[nDepth0].submenu[nDepth1].submenu[nDepth2].mid+'\')" >'+_Menu[nDepth0].submenu[nDepth1].submenu[nDepth2].title+'</a></li>'  );
                        }
                        _MainMenu.push('</ul></li>'  );
                    } else {
                        _MainMenu.push('\n<li class="depth-2" ><a href="javascript:_goMenu(\''+_Menu[nDepth0].submenu[nDepth1].mid+'\')" >'+_Menu[nDepth0].submenu[nDepth1].title+'</a></li>'  );
                    }

                }
                _MainMenu.push('</ul>');
            }
            _MainMenu.push('</li>');
          }

        $("#ulTopMenu").html(_MainMenu.join(""));


         //setTimeout(function(){
                $("#gnb").sMenu({
                    is_responsive: true,
                    mobile_width: 1200
                });
        // }, 100) ;
        }

        function _gf_makeSubMenu(){
          var sSubMenuObject = $('#lnb');
          var _SubMenu = [];
          var sMid1 = "";
          var sMid2 = "";
          var sMid3 = "";
          var nLoop = -1;
          var _oMenu = null;
          if (sSubMenuObject != null && typeof sSubMenuObject != "undefined") {
            _SubMenu.push ('<p class="home"><a href="/">홈으로가기</a></p>');

            sMid1 = _sSeelctMid.substr(0,2)
            sMid2 = _sSeelctMid.substr(2,2)
            sMid3 = _sSeelctMid.substr(4,2)


            _SubMenu.push ('<ul>');
            if (sMid1 != "") {
                _oMenu = _Menu;
                if (_oMenu.length > 0) {
                    _SubMenu.push ('<li>');
                    _SubMenu.push ('<a href="javascript:_goMenu(\''+_oMenu[parseInt(sMid1)].mid+'\')" >'+_oMenu[parseInt(sMid1)].title+'</a>'  );
                    _SubMenu.push ('<ul>');
                    for (nLoop =0 ; nLoop < _oMenu.length; nLoop ++){
                        _SubMenu.push ('<li><a href="javascript:_goMenu(\''+_oMenu[nLoop].mid+'\')" >'+_Menu[nLoop].title+'</a></li>'  );
                    }
                    _SubMenu.push ('</ul>');
                    _SubMenu.push ('</li>');
                }

                if (sMid2 == "") {
                    _oMenu = _Menu[parseInt(sMid1)].submenu;
                    if (_oMenu.length > 0) {
                        _SubMenu.push ('<li>');
                        _SubMenu.push ('<a href="javascript:_goMenu(\''+_oMenu[0].mid+'\')" >'+_oMenu[0].title+'</a>'  );
                        _SubMenu.push ('<ul>');
                        for (nLoop =0 ; nLoop < _oMenu.length; nLoop ++){
                            _SubMenu.push ('<li><a href="javascript:_goMenu(\''+_oMenu[nLoop].mid+'\')" >'+_oMenu[nLoop].title+'</a></li>'  );
                        }
                        _SubMenu.push ('</ul>');
                        _SubMenu.push ('</li>');
                    }

                }
            }

            if (sMid1 != "" && sMid2 != "") {
                _oMenu = _Menu[parseInt(sMid1)].submenu;
                if (_oMenu.length > 0) {
                    _SubMenu.push ('<li>');
                    _SubMenu.push ('<a href="javascript:_goMenu(\''+_oMenu[parseInt(sMid2)].mid+'\')" >'+_oMenu[parseInt(sMid2)].title+'</a>'  );
                    _SubMenu.push ('<ul>');
                    for (nLoop =0 ; nLoop < _oMenu.length; nLoop ++){
                        _SubMenu.push ('<li><a href="javascript:_goMenu(\''+_oMenu[nLoop].mid+'\')" >'+_oMenu[nLoop].title+'</a></li>'  );
                    }
                    _SubMenu.push ('</ul>');
                    _SubMenu.push ('</li>');
                }
                if (sMid3 == "") {
                _oMenu = _Menu[parseInt(sMid1)].submenu[parseInt(sMid2)].submenu;
                    if (_oMenu.length > 0) {
                        _SubMenu.push ('<li>');
                        _SubMenu.push ('<a href="javascript:_goMenu(\''+_oMenu[0].mid+'\')" >'+_oMenu[0].title+'</a>'  );
                        _SubMenu.push ('<ul>');
                        for (nLoop =0 ; nLoop < _oMenu.length; nLoop ++){
                            _SubMenu.push ('<li><a href="javascript:_goMenu(\''+_oMenu[nLoop].mid+'\')" >'+_oMenu[nLoop].title+'</a></li>'  );
                        }
                        _SubMenu.push ('</ul>');
                        _SubMenu.push ('</li>');
                    }
                }
            }
            if (sMid1 != "" && sMid2 != "" && sMid3 != "") {
                _oMenu = _Menu[parseInt(sMid1)].submenu[parseInt(sMid2)].submenu;
                if (_oMenu.length > 0) {
                    _SubMenu.push ('<li>');
                    _SubMenu.push ('<a href="javascript:_goMenu(\''+_oMenu[parseInt(sMid3)].mid+'\')" >'+_oMenu[parseInt(sMid3)].title+'</a>'  );
                    _SubMenu.push ('<ul>');
                    for (nLoop =0 ; nLoop < _oMenu.length; nLoop ++){
                        _SubMenu.push ('<li><a href="javascript:_goMenu(\''+_oMenu[nLoop].mid+'\')" >'+_oMenu[nLoop].title+'</a></li>'  );
                    }
                    _SubMenu.push ('</ul>');
                    _SubMenu.push ('</li>');
                }

            }
            _SubMenu.push ('</ul>');

            sSubMenuObject.html(_SubMenu.join(""));

//            console.log(_SubMenu.join(""));

            //Sub메뉴 활성화.
            $("#lnb").sMenu({
              //hover_class : "hover",
              is_snb: true
            });

          }
        }

        //submit Object
        /**
        * 공통 서버 호출 function
        * svc_id : 서비스 ID (통일 callback 쓸때 구분)
        * url    : 호출 서비스 URL
        * param  : 서비스 전달 파라 메터 web get parameter (=, & 로 구분 : aaa=bbb&bbb=ccc )
        * data   : {} 형태의 서버 전달 데이터
        * callback : 성공이나, 실패시 호출 할 함수
        * async : 비동기화 여부 기본 true, 동기화시 false
        * https : 기본 http 통신 true면 https로 암호화 통신
        */
        function _gf_Submit ( svc_id , url, param, data, callback, async, https) {
            var _url = __ControlPage + url + "?SVC_ID=" + svc_id ;
            var _option = {};
            var _sDataType = "json";
            var _async = true;
            //$.support.cors = true;

            if (location.hostname.indexOf(".co.kr") >= 0 ){
                if ( (typeof https != 'undefined' && https === true) ||  window.location.protocol.indexOf("https") >= 0){
                    _url = "https://"+ window.location.hostname+_url ;
        //            _url = "https://"+ window.location.host +""+ _url;
        //            _sDataType = "jsonp";

                }

            }
            if ( typeof async != 'undefined' && async === false ) {
                _async = false;
            }

            if (typeof param != 'undefined' && param.trim() != "") {
                _url += "&"+ param;
            }

            _option.url       =  _url;
            _option.method    = 'POST';
            _option.dataType  = _sDataType;
            _option.async     = _async;
            _option.cache     = false;
            _option.timeout   = 5 * 60 * 1000;
            _option.xhrFields = {withCredentials: true} //cross domain session 유지

            if ( typeof data != 'undefined' && data != '' ) {
                _option.data ={
                    'JSON_DATA_LIST' : JSON.stringify(data)
                };
//                console.log(JSON.stringify(_option.data));
            }

            if(typeof(callback) === 'function') {
                $("#__progress").removeClass("close"); //프로그래스바
            }
            var oRes = $.ajax(_option);
            var oRet ;
                oRes.done(function(returnData){
                    $("#__progress").addClass("close"); //프로그래스바
                    if(typeof(callback) === 'function') {
                        //세션 체크 오류시 로그인 페이지 이동
                        if ( returnData.errorcode == "-9999999999") {
                            window.location.href = __login_page+ "&" + __returnurlParamName  +"=" + encodeURIComponent(location.pathname + "?" + location.search);
                        } else {
                            callback( svc_id , returnData.errorcode, returnData.errormsg, returnData);
                        }
                    } else {
                        oRet = returnData;
                    }
                });
                oRes.fail(function(x, e) {
                    $("#__progress").addClass("close"); //프로그래스바
                    if(typeof(callback) === 'function') { callback( svc_id , -9999999990, "ERROR", e);}else {oRet = e;}
                });
                return oRet;
        }

        /**
         * 문자열 길기 계산 (UTF-8) 기준
         * s: 문자열
         */
        function _gf_byteLengthOf(s ){
            //assuming the String is UCS-2(aka UTF-16) encoded
            var n=0;
            for(var i=0,l=s.length; i<l; i++){
                var hi=s.charCodeAt(i);
                if(hi<0x0080){ //[0x0000, 0x007F]
                    n+=1;
                }else if(hi<0x0800){ //[0x0080, 0x07FF]
                    n+=2;
                }else if(hi<0xD800){ //[0x0800, 0xD7FF]
                    n+=3;
                }else if(hi<0xDC00){ //[0xD800, 0xDBFF]
                    var lo=s.charCodeAt(++i);
                    if(i<l&&lo>=0xDC00&&lo<=0xDFFF){ //followed by [0xDC00, 0xDFFF]
                        n+=4;
                    }else{
                        n+=2;
                        //throw new Error("UCS-2 String malformed");
                    }
                }else if(hi<0xE000){ //[0xDC00, 0xDFFF]
                    n+=2;
                    //throw new Error("UCS-2 String malformed");
                }else{ //[0xE000, 0xFFFF]
                    n+=3;
                }
            }
            return n;
        }

        /**
         * 고유식별자 생성
         * @returns
         */
        function _gf_generateUUID(){
            var d = new Date().getTime();
            var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = (d + Math.random()*16)%16 | 0;
                d = Math.floor(d/16);
                return (c=='x' ? r : (r&0x3|0x8)).toString(16);
            });
            return uuid.toUpperCase();
        }


        /**
         * Alert
         */
        function _gf_alert( sMsg) {
            var oObj = $("#__alert");
            var sHtml = "";
            if (oObj.length > 0){
                sHtml = "<div>" + sMsg + "</div>";
                $("#__alert_msg").html(sMsg);
                oObj.removeClass('close');
            }
        }



        /**
         * Confrim 창
         */

        var __confirmCancel = null;
        var __confirmOk = null;

        function _gf_confirm(sTitle, sMsg , oOk ,oCancel) {

            __confirmCancel = oCancel;
            __confirmOk = oOk;
            var sHtml = "";

            var oObj = $("#__confirm");
            if (oObj.length > 0) {
                $("#__confirm_title").text(sTitle);
                sHtml = "<div>" + sMsg + "</div>";
                $("#__confirm_msg").html(sHtml);
                oObj.removeClass('close');
            }
        }

        function _gf_confirmCancel () {
            var oObj = $("#__confirm");
            if (typeof (__confirmCancel)  === "function") {
                __confirmCancel();
            }
            oObj.addClass('close');
            return false;
        }
        function _gf_confirmOk () {
            var oObj = $("#__confirm");
            if (typeof (__confirmOk)  === "function") {
                __confirmOk();
            }
            oObj.addClass('close');
            return true;
        }




        var otp = (function (){
            "use strict";

            var _otp_timmer_id = null;
            var _otp_time = 0;
            var _otp_object = null;

            function pad (x) {
                return (x < 10) ? "0"+x : x;
            }



            function setTime (){
                _otp_time = 300; // 5분
                if (_otp_object != null) {
                    clearInterval(_otp_timmer_id);
                    _otp_object.attr("placeholder",  "남은시간 : " + pad(parseInt(_otp_time / 60 % 60)) + ":" + pad(_otp_time % 60) );

                    _otp_timmer_id = setInterval(function () {
                                        _otp_time -= 1;
                                        _otp_object.attr("placeholder",  "남은시간 : " + pad(parseInt(_otp_time / 60 % 60)) + ":" + pad(_otp_time % 60) );
                                        if (_otp_time < 0) {
                                            clearInterval(_otp_timmer_id);
                                            _otp_object.attr("placeholder",  "인증번호 유효 시간이 지났습니다.");
                                        }
                                    }, 1000 );
                }
            }

            /**
            * OTP 생성
            * mobile_no : 핸드폰번호
            * type : 인증구분
            * inputObject 인증값 입력 object (javascript Object type)
            * @returns
            */
            function _gf_create_otp (mobile_no , type, inputObject) {
                var oParam  = {};
                var sToken = "";
                _otp_object= null;


                //파라메터 세팅
                oParam.mobile_no = mobile_no.replaceAll("-","");
                oParam.otp_type = type;

                if (typeof inputObject == "object") {
                    _otp_object = inputObject;
                }

                _gf_Submit("create_otp_no" , "/com.do", "", oParam, function (svc_id , ErrorCode, ErrorMsg, returnData){
                    //성공
                    if (parseInt(ErrorCode) >= 0) {
                        sToken = returnData.token;
                        alert('인증번호가 발송되었습니다.\인증번호 미수신시 회원님 휴대폰의 스팸메세지 확인을 부탁드립니다.');
                        setTime ();

                    }else {
                        alert("인증번호 생성에 실패 했습니다.");

                    }
                },false);
                return sToken;



            };

            /**
            * OTP 인증 확인
            */
            function _gf_otp_confirm(token , otp_no) {
                var oParam  = {};
                var bRet = false;
                //파라메터 세팅
                oParam.token = token;
                oParam.otp_no = otp_no;

                if (_otp_time > 0) {
                    _gf_Submit("otp_confirm" , "/com.do", "", oParam, function (svc_id , ErrorCode, ErrorMsg, returnData){
                        //성공
                        if (parseInt(ErrorCode) >= 0) {
                            clearInterval(_otp_timmer_id);
                            alert("인증에 성공했습니다.");
                            bRet = true;
                        }else {
                            alert("인증번호가 틀리거나 유효시간이 지났습니다.\n다시 인증 번호를 받으시 바랍니다.");
                        }
                    },false);
                }
                return bRet;

            };

            /**
            * OTP 시간 연장
            */

            function _gf_time_prolongation (token){
                var oParam  = {};
                var bRet    = false;
                //파라메터 세팅
                oParam.token = token;

                if (_otp_time > 0) {
                    _gf_Submit("time_prolongation" , "/com.do", "", oParam, function (svc_id , ErrorCode, ErrorMsg, returnData){
                        //성공
                        if (parseInt(ErrorCode) >= 0) {
                            setTime();
                            bRet = true;
                        }else {
                            alert("시간연장 할 인증번호가 없습니다.");
                        }
                    },false);
                }

                return bRet;
            }





            return {
                 create       : _gf_create_otp
                ,confirm      : _gf_otp_confirm
                ,prolongation : _gf_time_prolongation
            }



        }) ();

        /**
         * 사용자 agent 정보 입력
         * @param sMid  : 메뉴코드
         * @param sMname : 메뉴명
         * @returns
         */
        function _gf_saveAgnet( sMid , sMname) {

            var oParam = {};
            var parser = new UAParser();
            var result = parser.getResult();


            oParam.menu_id         = sMid;
            oParam.menu_name       = sMname;
            oParam.device          = result.device.type;
            oParam.os              = result.os.name;
            oParam.os_version      = result.os.version;
            oParam.browser         = result.browser.name;
            oParam.browser_version = result.browser.version;



            _gf_Submit("saveAgent" , "/com.do", "", oParam, "" );

        };


        /**
         *   결제 요청
         */
        function _gf_payemntRequst(oPay) {

            var __SendData  = "";
            var __popupname = "hhipaypop";
            if (typeof oPay === 'object'){
                if (typeof oPay.p_item_type == 'undefined' || oPay.p_item_type.length <= 0) {
                    alert('상품 타입을 입력 하세요. 예) obj.p_item_type="movie"');
                    return false
                } else {
                    oPay.p_item_type =  oPay.p_item_type.toUpperCase();
                }

                if (typeof oPay.p_pg == 'undefined' || oPay.p_pg.length <= 0) {
                    alert('PG사를 을 입력 하세요. 예) obj.p_pg="kicc"');
                    return false
                } else {
                    oPay.p_pg =  oPay.p_pg.toUpperCase();
                }

                if (typeof oPay.p_item_name == 'undefined' || oPay.p_item_name.length <= 0) {
                    alert('판매 상품명을 입력 하세요. 예) obj.p_item_name="상품명"');
                    return false
                }

                if (typeof oPay.p_paycd == 'undefined' || oPay.p_paycd.length <= 0) {
                    alert('지불수단을 입력 하세요. 예) obj.p_paycd="99"');
                    return false
                } else {
                    oPay.p_paycd =  oPay.p_paycd.toUpperCase();
                }

                if (typeof oPay.p_amount == 'undefined' || oPay.p_amount.length <= 0 || isNaN(parseInt(oPay.p_amount))) {
                    alert('지불 금액 입력 하세요. 예) obj.p_amount="9900"');
                    return false
                } else {
                    oPay.p_amount =  oPay.p_amount.replaceAll(",","");
                }

                if (typeof oPay.p_amount == 'undefined' || oPay.p_amount.length <=  0 || isNaN(parseInt(oPay.p_amount))) {
                    alert('지불 금액 입력 하세요. 예) obj.p_amount="9900"');
                    return false
                } else {
                    oPay.p_amount =  oPay.p_amount.replaceAll(",","");
                }
                if (typeof oPay.p_qty == 'undefined' || oPay.p_qty.length <=  0 || isNaN(parseInt(oPay.p_qty))) {
                    alert('수량 입력 하세요. 예) obj.p_qty="1"');
                    return false
                } else {
                    oPay.p_qty =  oPay.p_qty.replaceAll(",","");
                }
                if (typeof oPay.p_taxfreeamount == 'undefined' || oPay.p_taxfreeamount.length <=  0 || isNaN(parseInt(oPay.p_taxfreeamount))  || Number(oPay.p_taxfreeamount) == 0) {
                    oPay.p_taxfreeamount =  "0";
                    oPay.p_tax_flg = "";
                } else {
                    oPay.p_taxfreeamount =  oPay.p_taxfreeamount.replaceAll(",","");
                    oPay.p_tax_flg = "TG01";
                }

                if (typeof oPay.p_vat == 'undefined' || oPay.p_vat.length <=  0 || isNaN(parseInt(oPay.p_vat))) {
                    oPay.p_vat =  "0";
                } else {
                    oPay.p_vat =  oPay.p_vat.replaceAll(",","");
                }
                oPay.p_ordno    = _gf_generateUUID().replaceAll("-","") ;

                if (typeof oPay.p_apptype == "undefined" || oPay.p_apptype == null || oPay.p_apptype.length <= 0){
                    oPay.p_apptype  = "A" ;
                }
                
                try {
                    oPay.p_tax_amt = parseInt(oPay.p_amount) - parseInt (oPay.p_taxfreeamount);    
                } catch ( e) {
                    oPay.p_tax_amt = oPay.p_amount;
                }
                

                oPay.p_ismobile = __isMobile;


                //kicc 이고 PT면 현금영수증
                if (oPay.p_pg + oPay.p_paycd =='KICCPT') {
                    //부가세 체크
                    if (typeof oPay.p_vat == "undefined" || oPay.p_vat == null || oPay.p_vat.length <= 0){
                        alert('부가세 금액을 입력 하세요. 예) obj.p_vat="9900"');
                         return false
                    }

                    //소득공제용핸드폰 체크
                    if (typeof oPay.p_auth_value == "undefined" || oPay.p_auth_value == null || oPay.p_auth_value.length <= 0){
                        alert('소득공제용 핸드폰번호를 입력 하세요. 예) obj.p_auth_value="01000000000"');
                        return false
                   }
                    oPay.p_auth_value = oPay.p_auth_value.trim().replaceAll("-","");
                  //현금영수증
                  oPay.p_tr_cd    = "00201050";
                  oPay.p_req_type = "issue";
                }

                //카카오페이 이면
                if (oPay.p_pg == "KAKAO") {
                    if (typeof oPay.p_taxfreeamount == 'undefined' || oPay.p_taxfreeamount.length <=  0 || isNaN(parseInt(oPay.p_taxfreeamount))) {
                        alert('비과세금액 입력 하세요. 예) obj.p_taxfreeamount="9900"');
                        return false
                    } else {
                        oPay.p_taxfreeamount =  oPay.p_taxfreeamount.replaceAll(",","");
                    }

                }


//                __SendData= encodeURIComponent(JSON.stringify(oPay));
                __SendData= JSON.stringify(oPay);

                switch (oPay.p_pg) {
                  case "KICC" :
                    if( oPay.p_paycd == "PT") { //현금영수증
                        var oData = {"payparam" : oPay}
                        _gf_Submit("prepayment" , "/cp.do" , "" , oData , function (svcid,e,emsg,data){
                              if (data.paychk == "true") {
                                  var frm = document.frm_com_pay;
                                  frm.compaykey.value = data._paykey;
                                  frm.action = "/cp.do";
                                  frm.SVC_ID.value = "payment";
                                  frm.target = "_self";
                                  frm.submit() ;
                              } else {
                                  if(typeof data.pay_err_msg != "undefined" && data.pay_err_msg.length > 0) {
                                      _gf_alert(data.pay_err_msg);
                                  }else {
                                      _gf_alert("결제 처리 할 수 없습니다.");
                                  }

                              }
                          },false,true );
                    }else {
                        if (!__isMobile) { //일반결제
                            var    popOpt = "top=0 ,left=0, height=580, width=750,";
                            popOpt += "dependent=yes, status=no, minimizable=no, fullscreen=no, location=no, scrollbars=no, menubar=no, toolbar=no, titlebar=no, directories=no, resizable=no";

                            var retPopup = window.open( ""  , __popupname, popOpt );

                            var frm = document.frm_com_pay;

//                            if(retPopup) {
//                                alert("BLOWER SETTING POPUP NOT ALLOWED ");
//                                return;
//                            }
                            retPopup.focus();
                            frm.action = "/cp.do";
                            frm.SVC_ID.value = "prepayment";
                            frm.payparam.value = __SendData;
                            frm.target = __popupname;
                            frm.submit() ;



                        } else {//모바일결제
                            var frm = document.frm_com_pay;
                            frm.action = "/cp.do";
                            frm.SVC_ID.value = "prepayment";
                            frm.payparam.value = __SendData;
                            frm.target = "_self";
                            frm.submit() ;

                        }

                    }
                    break;
                  case "KAKAO" : //카카오페이
                    var oData = {"payparam" : oPay}
                      _gf_Submit("prepayment" , "/cp.do" , "" , oData , function (svcid,e,emsg,data){
                            if (data.paychk == "true") {
                                //var frm = document.frm_com_pay;
                                //frm.compaykey.value = data._paykey;
                                //frm.action = "/cp.do";
                                //frm.SVC_ID.value = "payment";
                                //frm.target = "_self";
                                //frm.submit() ;

                                if (data.pay_err_code == "0") {
                                    if (__isMobile) {
                                        location.href = data.next_redirect_mobile_url;
                                    } else {
                                        location.href = data.next_redirect_pc_url;
                                    }
                                } else {
                                    _gf_alert(data.pay_err_msg);
                                }
                            } else {
                                if(typeof data.pay_err_msg != "undefined" && data.pay_err_msg.length > 0) {
                                    _gf_alert(data.pay_err_msg);
                                }else {
                                    _gf_alert("결제 처리 할 수 없습니다.");
                                }

                            }
                        },false,true );
                    break;
                  default :
                     var oData = {"payparam" : oPay}
                    _gf_Submit("prepayment" , "/cp.do" , "" , oData , function (svcid,e,emsg,data){
                          if (data.paychk == "true") {
                              var frm = document.frm_com_pay;
                              frm.compaykey.value = data._paykey;
                              frm.action = "/cp.do";
                              frm.SVC_ID.value = "payment";
                              frm.target = "_self";
                              frm.submit() ;
                          } else {
                              if(typeof data.pay_err_msg != "undefined" && data.pay_err_msg.length > 0) {
                                  _gf_alert(data.pay_err_msg);
                              }else {
                                  _gf_alert("결제 처리 할 수 없습니다.");
                              }

                          }
                      },false,true );
                }


            }else {
                alert ('결제 요청 데이터를 object type으로 입력 하세요.');
            }

        }

        /**
         *  결제 승인 처리
         */
        function _gf_cancelPayment(oPay) {

            if (typeof oPay.p_pg == 'undefined' || oPay.p_pg.length <= 0) {
                alert('PG사를 을 입력 하세요. 예) obj.p_pg="kicc"');
                return false
            } else {
                oPay.p_pg =  oPay.p_pg.toUpperCase();
            }
            if (typeof oPay.p_item_type == 'undefined' || oPay.p_item_type.length <= 0) {
                alert('상품 타입을 입력 하세요. 예) obj.p_item_type="movie"');
                return false
            } else {
                oPay.p_item_type =  oPay.p_item_type.toUpperCase();
            }

            if (typeof oPay.p_paycd == 'undefined' || oPay.p_paycd.length <= 0) {
                alert('지불수단을 입력 하세요. 예) obj.p_paycd="99"');
                return false
            } else {
                oPay.p_paycd =  oPay.p_paycd.toUpperCase();
            }

            if (oPay.p_pg == 'KICC' || oPay.p_pg == 'KAKAO') {
                if (typeof oPay.p_org_cno == 'undefined' || oPay.p_org_cno.length <= 0) {
                    alert('원승인번호를 입력 하세요. 예) obj.p_org_cno="123456788"');
                    return false
                }

            }
            if (typeof oPay.p_mgr_amt == 'undefined' || oPay.p_mgr_amt.length <= 0 || isNaN(parseInt(oPay.p_mgr_amt))) {
                alert('취소금액을 입력 하세요. 예) obj.p_mgr_amt="123456788"');
                return false
            }
            if (typeof oPay.p_mgr_txtype == 'undefined' || oPay.p_mgr_txtype.length <= 0) {
                alert('취소 구분을 입력 하세요. 예) obj.p_mgr_txtype="40"');
                return false
            }

            //취소 고정KICC만
            if(oPay.p_pg == 'KICC')  oPay.p_tr_cd = "00201000";

            //취소 추가
            if (typeof oPay.p_apptype == "undefined" || oPay.p_apptype == null || oPay.p_apptype.length <= 0){
                oPay.p_apptype  = "C" ;
            }

            //kicc 이고 PT면 현금영수증
            if (oPay.p_pg + oPay.p_paycd =='KICCPT') {
                oPay.p_tr_cd    = "00201050";
                oPay.p_req_type = "cancel";
                oPay.mgr_txtype = "51";
            }

            //카카오페이
            if (oPay.p_pg == "KAKAO") {
                if (typeof oPay.p_mgr_taxfree_amt == 'undefined' || oPay.p_mgr_taxfree_amt.length <=  0 || isNaN(parseInt(oPay.p_mgr_taxfree_amt))) {
                    alert('비과세 취소 금액 입력 하세요. 예) obj.p_mgr_taxfree_amt="9900"');
                    return false
                } else {
                    oPay.p_mgr_taxfree_amt =  oPay.p_mgr_taxfree_amt.replaceAll(",","");
                }

            }

            //_gf_Submit ( svc_id , url, param, data, callback, async, https) {
            var oData = {"payparam" : oPay}

            _gf_Submit("precancel" , "/cp.do" , "" , oData , function (svcid,e,emsg,data){
                if (data.paychk == "true") {
                    var frm = document.frm_com_pay;
                    frm.action = "/cp.do";
                    frm.compaykey.value = data._paykey;
                    frm.SVC_ID.value = "cancelpayment";
                    frm.target = "_self";
                    frm.submit() ;
                } else {
                    if(typeof data.pay_err_msg != "undefined" && data.pay_err_msg.length > 0) {
                        _gf_alert(data.pay_err_msg);
                    }else {
                        _gf_alert("결제 취소를 처리 할 수 없습니다.");
                    }

                }
            },false,true );


        }

        function _gf_AutoLogin () {
            var nLoop = 0;
            if (typeof window.localStorage == "object" ){
                var a = window.localStorage.getItem("hhiarts1");
                var b = window.localStorage.getItem("hhiarts2");
                var l = parseInt(window.localStorage.getItem("hhiartspwl"));
                var p = "";


                if (typeof b != "undefined" && b != null &&b.length > 0 && b != "undefined" && b =='Y') {
                    var sparam = [];


                    for (nLoop = 0 ; nLoop < l ; nLoop ++) {
                        p += window.localStorage.getItem("hhiartspw" + nLoop);
                    }
                    sparam.push('txtUserId=' + a.trim());
                    sparam.push('txtUserPassword=' + p.trim());
                    sparam.push('txtUserPachkSaveId=' + 'N');

                    _c.submit( "userLogin" , "/member.do", sparam.join("&"), "", function(svc_id, e, em, data){
                    if (data.msg == "OK") {
						
						
                        _c.saveAgent("LOGINA", "로그인자동");
						if ((typeof data.pass_initialize_yn != 'undefined' && data.pass_initialize_yn == 'Y') ||  (typeof data.changepw != 'undefined' && data.changepw == 'Y') ) {
                           document.location = decodeURIComponent('/mypage/member/password.do?SVC_ID=member_password');
                        } else {
		                  window.location.reload();
		                }
                        

                    }             }, false, true ) ;
                }
            }
        }

        /**
         * 실행 가능 Function List 리턴
         */
        return {
            submit        : _gf_Submit          //submit
           ,getByteLength : _gf_byteLengthOf     //입력 문자열 byte길이 리턴
           ,getUUID       : _gf_generateUUID     //고유식별자 생성
           ,otp           : otp
           ,makeTopMenu   : _gf_makeTopMenu
           ,makeSubMenu   : _gf_makeSubMenu
           ,saveAgent     : _gf_saveAgnet
           ,alert         : _gf_alert
           ,confirm       : _gf_confirm
           ,confirmCancel : _gf_confirmCancel
           ,confirmOk     : _gf_confirmOk
           ,doPayment     : _gf_payemntRequst
           ,cancelPayment : _gf_cancelPayment
           ,autoLogin     : _gf_AutoLogin
        }



    })();


    Map = function(){
        this.map = new Object();
        this.keyArray = new Array();
        };
        Map.prototype = {
            put : function(key, value){
                this.map[key] = value;
                this.keyArray.push(key);
            },
            get : function(key){
                return this.map[key];
            },
            indexOf : function (key){
                return this.keyArray.indexOf(key);
            },
            getValueOfOffset: function (key, offset) {
                var sidx = this.keyArray.indexOf(key) ;
                var sfindkey = this.keyArray[sidx + offset];
                return this.map[sfindkey];
            },
            containsKey : function(key){
            return key in this.map;
            },
            containsValue : function(value){
            for(var prop in this.map){
            if(this.map[prop] == value) return true;
            }
            return false;
            },
            isEmpty : function(key){
            return (this.size() == 0);
            },
            clear : function(){
            for(var prop in this.map){
            delete this.map[prop];
            }
            this.keyArray = [];
            },
            remove : function(key){
            delete this.map[key];
            this.keyArray.splice(this.keyArray.indexOf(key), 1);
            },
            keys : function(){
                var keys = new Array();
                for(var prop in this.map){
                    keys.push(prop);
                }
                return keys;
            },
            values : function(){
            var values = new Array();
                for(var prop in this.map){
                values.push(this.map[prop]);
                }
                return values;
            },
            size : function(){
            var count = 0;
            for (var prop in this.map) {
                count++;
            }
            return count;
            }
        };


function addComma(num) {
    var regexp = /\B(?=(\d{3})+(?!\d))/g;
    return num.toString().replace(regexp, ',');
}

Date.prototype.format = function(f) {
    if (!this.valueOf()) return " ";

    var weekName = ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"];
    var weekKorName = ["일", "월", "화", "수", "목", "금", "토"];
    var d = this;

    return f.replace(/(yyyy|yy|MM|dd|EE|E|hh|mm|ss|a\/p)/gi, function($1) {
        switch ($1) {
            case "yyyy": return d.getFullYear();
            case "yy": return (d.getFullYear() % 1000).zf(2);
            case "MM": return (d.getMonth() + 1).zf(2);
            case "dd": return d.getDate().zf(2);
            case "EE": return weekKorName[d.getDay()];
            case "E": return weekName[d.getDay()];
            case "HH": return d.getHours().zf(2);
            case "hh": return ((h = d.getHours() % 12) ? h : 12).zf(2);
            case "mm": return d.getMinutes().zf(2);
            case "ss": return d.getSeconds().zf(2);
            case "a/p": return d.getHours() < 12 ? "오전" : "오후";
            default: return $1;
        }
    });
};

String.prototype.string = function(len){var s = '', i = 0; while (i++ < len) { s += this; } return s;};
String.prototype.zf = function(len){return "0".string(len - this.length) + this;};
Number.prototype.zf = function(len){return this.toString().zf(len);};


/**
 * 숫자 체크 : 숫자가 아닐 경우 해당 문자 삭제
 */
function checkNumber(obj) {
    var strVal = obj.value;
    var len = strVal.length;
    for (var i=0; i < len; i++) {
        if(strVal.charAt(i) < '0' || strVal.charAt(i) > '9') {
            obj.value = strVal.substr(0, len-1);
        }
    }
}

/**
 * 생년월일 체크
 */
function checkBirthday(obj) {
    var strVal = obj.value;
    var len = strVal.length;

    var strDate = new Date();
    var strYear = strDate.getFullYear();
    var strMonth = (strDate.getMonth()+1);
    var strDay = strDate.getDate();

    if (len > 0 && len != 8) {
        alert("생년월일을 정확히 작성해 주세요\n예) 1998년 1월 1일생 -> 19980101 로 입력");
        obj.value = "";
        return false;
    }

    if (len == 8) {
        if (strMonth < 10) {
            strMonth = '0' + strMonth;
        }

        if (strDay < 10) {
            strDay = '0' + strDay;
        }

        var strBirthYear = Number(strVal.substr(0,4));
        var strBirthMonth = strVal.substr(4,2);
        var strBirthDay = strVal.substr(6,2);
        var strMaxAge = 100;
        if(strBirthYear < Number(strYear-strMaxAge) || Number(strBirthMonth) < 1 || Number(strBirthMonth) > 12 || Number(strBirthDay) < 1 || Number(strBirthDay) > 31) {
            alert("생년월일을 확인해 주세요\n예) 1998년 1월 1일생 -> 19980101 로 입력");
            obj.value = "";
            return false;
        }

        if (Number(strVal) > Number("" +strYear+strMonth+strDay)) {
            alert("생년월일을 확인해 주세요.");
        }
    }

}

function isCellPhone(p) {
    p = p.split('-').join('');
    var regPhone = /^((01[1|6|7|8|9])[1-9]+[0-9]{6,7})|(010[1-9][0-9]{7})$/;
    return regPhone.test(p);
}



/**
 * 공백 체크
 */
function checkSpace(val) {
    if(val.search(/\s/) != -1) {
        return true;
    } else {
        return false;
    }
}

/**
 * 특수 문자 체크
 */
function checkSpecialChar(val) {

    var strPattern = /[`<>~!@#$%^&*(){}|\\\'\";:\/?]/gi;
    if(strPattern.test(val) == true) {
        return true;
    } else {
        return false;
    }
}

/**
 * 전화번호 자리수 체크
 */
function checkDigit(obj, nlen) {
    var strVal = obj.value;
    var len = strVal.length;
    
    if (typeof nlen == "undefined") {
        if (len > 0 && len < 4) {
            alert("번호는 4자리여야 합니다.");
            obj.value = "";
            return;
        }
        
    } else {
        if (len > 0 && len < nlen) {
            alert("번호는 "+ nlen +"자리 이상이여야 합니다.");
            obj.value = "";
            return;
        }
        
    }


}


function calcAge(birth) {
    var date = new Date();
    var year = date.getFullYear();
    var month = (date.getMonth() + 1);
    var day = date.getDate();
    if (month < 10)
        month = '0' + month;

    if (day < 10)
        day = '0' + day;

    var monthDay = month  +""+ day;
    birth = birth.replace('-', '').replace('-', '');
    var birthdayy = birth.substr(0, 4);
    var birthdaymd = birth.substr(4, 4);
    var age = monthDay < birthdaymd ? year - birthdayy - 1 : year - birthdayy;

    return age;

}

function alertNotice() {
    _c.alert("공연 예매 및 강좌 접수는 \n현장 안내 데스크를 방문하여 주시기 바랍니다. \n(8월 중 온라인 예매가 가능합니다.)");
}
